<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled"
                                     proxy-target-class="true">
        <security:expression-handler ref="oauthExpressionHandler"/>
    </security:global-method-security>
    <oauth:expression-handler id="oauthExpressionHandler" />
    <oauth:web-expression-handler id="oauthWebExpressionHandler" />


    <security:http pattern="/oauth/token" create-session="stateless" use-expressions="true"
                   authentication-manager-ref="clientAuthenticationManager">
        <security:csrf disabled="true"/>
        <security:intercept-url pattern="/oauth/token" access="isFullyAuthenticated()"/>
        <security:anonymous enabled="false"/>
        <security:http-basic entry-point-ref="clientAuthEntryPoint"/>
        <security:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER"/>
        <security:access-denied-handler ref="oauthAccessDeniedHandler"/>
        <security:http-basic/>
    </security:http>

    <security:http pattern="/restful/**" use-expressions="true" create-session="never" entry-point-ref="oauthAuthEntryPoint"
                   access-decision-manager-ref="accessDecisionManager" >
        <security:csrf disabled="true"/>
        <security:intercept-url pattern="/restful/api/currentuser" access="hasAnyRole('ROLE_ADMIN', 'ROLE_USER')"/>


        <security:anonymous enabled="false"/>
        <security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <security:access-denied-handler ref="oauthAccessDeniedHandler"/>
        <security:http-basic/>
    </security:http>

    <bean id="oauthAuthEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test"/>
    </bean>
    <bean id="clientAuthEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test/client"/>
        <property name="typeName" value="Basic"/>
    </bean>
    <bean id="oauthAccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter">
                    <property name="rolePrefix" value=""/>
                        </bean>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <security:authentication-manager id="clientAuthenticationManager">
        <security:authentication-provider user-service-ref="clientDetailsUserService"/>
    </security:authentication-manager>

    <bean id="clientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails"/>
    </bean>

   <!-- <security:authentication-manager alias="customAuthenticationManager">
        <security:authentication-provider ref="authenticationProvider"/>
    </security:authentication-manager>
    <bean id="authenticationProvider" class="pl.upir.blog.security.CustomAuthenticationProvider"/>-->

    <security:authentication-manager alias="authenticationManager">
        <!-- <security:authentication-provider>
             <security:user-service id="userDetailService">
                 <security:user name="admin" authorities="ROLE_ADMIN" password="admin" />
             </security:user-service>
         </security:authentication-provider>-->
        <!--<security:authentication-provider user-service-ref="blgUserSecurityService">-->
        <security:authentication-provider user-service-ref="blgUserSecurityService">
            <security:password-encoder ref="mD5Encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- Client Definition-->
    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="rest_user"
                      authorized-grant-types="password,refresh_token,authorization_code,implicit"
                      authorities="ROLE_USER"
                      scope="read,write,trust"
                      access-token-validity="600"
                      refresh-token-validity="#{12*60*60}"/>

        <oauth:client client-id="rest_admin"
                      authorized-grant-types="password,refresh_token,authorization_code,implicit"
                      redirect-uri="/web"
                      authorities="ROLE_ADMIN"
                      scope="read,write,trust"
                      access-token-validity="600"
                      refresh-token-validity="#{12*60*60}"/>
    </oauth:client-details-service>

    <!--Token management-->
    <oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenService"
                              user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code/>
        <oauth:implicit/>
        <oauth:refresh-token />
        <oauth:client-credentials/>
        <oauth:password/>
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenService" />


    <!--Token store-->
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore">
    </bean>

    <bean id="tokenService" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
        <property name="supportRefreshToken" value="true"/>
        <property name="clientDetailsService" ref="clientDetails"/>
        <property name="accessTokenValiditySeconds" value="10"/>
    </bean>

    <bean id="userApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <property name="tokenServices" ref="tokenService"/>

    </bean>



    <security:http pattern="public/**" security="none"/>

    <security:http auto-config="true" use-expressions="true" authentication-manager-ref="authenticationManager"
                   request-matcher="regex">
        <security:form-login login-page="/sign"
                             login-processing-url="/sign/signin"
                             default-target-url="/"
                             authentication-failure-url="/sign?error=login"
                             always-use-default-target="true"
                             username-parameter="j_username"
                             password-parameter="j_password"/>

        <security:access-denied-handler error-page="/?error=access_denied"/>
        <security:intercept-url pattern="/sign" access="isAnonymous()"/>
        <security:intercept-url pattern="/sign/signout" access="permitAll()"/>
        <security:intercept-url pattern="/" access="permitAll"/>
        <security:intercept-url pattern="\A/users.*\Z" access="hasRole('ADMIN')"/>
        <security:intercept-url pattern="\A/users/detail.*\Z" access="hasAnyRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/j_spring_security_logout" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <security:anonymous enabled="true"/>

        <security:session-management invalid-session-url="/"/>
        <security:logout logout-url="/j_spring_security_logout" logout-success-url="/" invalidate-session="true"
                         delete-cookies="JSESSIONID"/>
        <security:csrf disabled="true"/>
    </security:http>


    <!-- Encoders-->

    <context:component-scan base-package="pl.upir.blog.web.util"/>
    <!--hand made-->
    <bean id="encoderMD5" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" autowire="byName"/>
    <!--spring-->

   <!-- <security:authentication-manager alias="authenticationManagerOauth">
        <security:authentication-provider user-service-ref="blgUserSecurityService">
            <security:password-encoder ref="mD5Encoder"/>
        </security:authentication-provider>
        &lt;!&ndash; <security:authentication-provider >
            <security:user-service >
                <security:user name="user" password="user" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>&ndash;&gt;
        &lt;!&ndash;<security:authentication-provider>
            <security:jdbc-user-service data-source-ref="dataSource"
                                        users-by-username-query="SELECT usr_login, usr_password, true from blg_user WHERE usr_login=?"
                                        authorities-by-username-query="SELECT u.usr_login, r.role_name
                                        FROM blg_user u
                                        JOIN blg_user_role r ON u.usr_id=r.usr_id
                                        JOIN blg_dic_role dr ON r.role_id=dr.role_id WHERE u.usr_login=?"/>
        </security:authentication-provider>&ndash;&gt;
    </security:authentication-manager>-->





    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
        <property name="rolePrefix" value=""/>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="cacheSeconds" value="0"/>
    </bean>


</beans>