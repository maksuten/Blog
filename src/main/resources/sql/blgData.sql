--
-- Скрипт сгенерирован Devart dbForge Studio for MySQL, Версия 6.3.358.0
-- Домашняя страница продукта: http://www.devart.com/ru/dbforge/mysql/studio
-- Дата скрипта: 8/09/2015 10:40:47 AM
-- Версия сервера: 5.7.7-rc-log
-- Версия клиента: 4.1
--


SET NAMES 'utf8';



INSERT INTO java_blog.blg_dic_category(dic_cat_id, dic_cat_name, dic_cat_enable, dic_cat_pstcount) VALUES
(1, 'Programming', 1, 3);
INSERT INTO java_blog.blg_dic_category(dic_cat_id, dic_cat_name, dic_cat_enable, dic_cat_pstcount) VALUES
(2, 'Administrating', 1, 10);
INSERT INTO java_blog.blg_dic_category(dic_cat_id, dic_cat_name, dic_cat_enable, dic_cat_pstcount) VALUES
(3, 'Databases', 1, 0);



INSERT INTO java_blog.blg_dic_role(role_id, role_name) VALUES
(1, 'ROLE_ADMIN');
INSERT INTO java_blog.blg_dic_role(role_id, role_name) VALUES
(2, 'ROLE_USER');

INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(1, 'Java');
INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(2, 'Spring');
INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(3, 'JavaScript');
INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(4, 'Linux');
INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(5, 'Ubuntu');
INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(6, 'jsf');
INSERT INTO java_blog.blg_dic_tag(dic_tag_id, dic_tag_name) VALUES
(7, 'Hibernate');

INSERT INTO java_blog.blg_dic_telephone_type(tel_type_id, tel_type_name) VALUES
(1, 'Home');
INSERT INTO java_blog.blg_dic_telephone_type(tel_type_id, tel_type_name) VALUES
(2, 'Mobile');

INSERT INTO java_blog.blg_post(pst_id, pst_title, pst_document, pst_title_image, pst_time_create, pst_time_modify, pst_enable, pst_count_like, pst_count_dislike, pst_count_comm, pst_url, pst_document_short) VALUES
(1, 'First post in my blog!', '<img src="http://habrastorage.org/files/04b/58b/804/04b58b8049ce4e1db470d07c140668a2.png" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Так сложилось, что за последние пару лет я успел поучаствовать в разработке нескольких социальных сетей. Главная задача, которую приходилось решать в каждом из этих проектов, заключалась в формировании новостной ленты пользователя. При чём важным условием была возможность масштабирования этой ленты в условиях роста числа пользователей (точнее, числа связей между ними) и, как следствие, — количества контента, который они деливерят друг другу.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Мой рассказ будет о том, как я,&nbsp;</span><a href="http://habrastorage.org/files/ec2/8f7/108/ec28f7108da14392a97d3b350de7af8c.png" style="box-sizing: border-box; color: rgb(189, 111, 218); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">превозмогая трудности</a><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">, решал задачу формирования новостной ленты. А также я расскажу о подходах, которые наработали ребята из проекта&nbsp;</span><a href="https://github.com/10gen-labs/socialite" style="box-sizing: border-box; color: rgb(189, 111, 218); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Socialite</a><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">, и которыми они поделились на&nbsp;</span><a href="https://www.mongodb.com/presentations/socialite-open-source-status-feed-part-3-scaling-data-feed" style="box-sizing: border-box; color: rgb(189, 111, 218); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">MongoDB World</a><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><a name="habracut" style="box-sizing: border-box; color: rgb(62, 147, 227); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"></a><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h1 style="box-sizing: border-box; color: rgb(79, 97, 115); font-size: 17px; line-height: 22px; margin-top: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif; letter-spacing: normal;">Как формировать ленту?</h1><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Итак, для начала абсолютно банальная информация о том, что любая новостная лента формируется из активности пользователей, с которыми мы дружим (либо которых мы фолловим/читаем/etc). Следовательно, задача формирования ленты — это задача доставки контента от автора его фолловерам. Лента, как правило, состоит из совершенно разношёрстного контента: котиков, коубов, комедийных видео, каких-то текстовых статусов и прочего. Поверх этого мы имеем репосты, комменты, лайки, тегирование пользователей на этих самых статусах/фоточках/видео. Следовательно, основные задачи, которые возникает перед разработчиками социальной сети — это:</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">1. Агрегация всей активности, всего контента, который постят пользователи. Назовём это условно&nbsp;</span><i style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">сервисом контента</i><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">. На пост-хэллоуинской картинке выше, он изображён кипящим магическим котлом, который переваривает и агрегирует всевозможные разношёрстные объекты в коллекцию более-менее однородных документов.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">2. Доставка пользовательского контента его фолловерам. Поручим этот процесс&nbsp;</span><i style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">сервису ленты</i><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">, который представлен колбочками. Таким образом, когда пользователь хочет почитать свою ленту, он идёт за своей персональной колбочкой, берёт её, с ней подходит к котелку и мы наливаем ему нужный кусочек контента.&nbsp;</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Вроде бы проще некуда. Давайте более детально рассмотрим подходы в реализации формирования персональной новостной ленты (другими словами, доставки контента от автора его читателям). Пару-тройку интересных трудностей я вам гарантирую.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h1 style="box-sizing: border-box; color: rgb(79, 97, 115); font-size: 17px; line-height: 22px; margin-top: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif; letter-spacing: normal;">Формируем ленту при чтении</h1><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Данный подход предусматривает формирование ленты на лету. Т.е. когда пользователь запрашивает свою новостную ленту, мы вытягиваем из нашего контент сервиса записи людей, на которых подписан пользователь, сортируем их по времени и получаем новостную ленту. Вот, в общем-то, и всё. Я думаю, что это наиболее очевидный и интуитивно-понятный подход. На схеме выглядит он примерно так:</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><img src="http://habrastorage.org/files/5b7/f0d/81e/5b7f0d81ecf6486d8cf1d977e5e2d591.jpg" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Когда пользователь постит что-то новое, процесс абсолютно тривиален: необходимо сделать всего одну запись в сервис контента. Эта простота и неудивительна, т.к. доставка ленты идёт при чтении, а значит всё самое интересное именно там.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">ОК, переходим к чтению ленты. Чтобы сформировать ленту для конкретного пользователя, нужно взять список людей, на которых он подписан. С этим списком мы идём к контент сервису и вытягиваем посты этих людей. Конечно, необязательно брать прям все-все записи, как правило, можно взять какую-то часть из этого, необходимую для формирования начала ленты или следующей её части. Но в любом случае размер получаемых данных будет много больше того, что мы в итоге вернём пользователю. Связано это с тем, что активность наших друзей совершенно неравномерная и заранее мы не знаем, сколько постов надо взять от каждого из них, чтобы показать нужную часть ленты.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Но это ещё не самая большая проблема данного подхода. Очевидно, что по мере роста сети, быстрее остальных будет расти коллекция контента. И рано или поздно наступит необходимость шардировать эту коллекцию. И, естественно, шардирование будет происходить по авторам контента (например, по их ID). Так вот, самый большой минус данного подхода заключается в том, что наш запрос будет затрагивать очень большое количество произвольных шардов. Если вы конечно не фолловите одного человека.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Давайте теперь тезисно подведём итоги по доставке лены на чтение.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Из плюсов:</b><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><ul style="box-sizing: border-box; margin-bottom: 0px; margin-left: 0px; padding-left: 20px; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Простота реализации. Именно поэтому такой подход хорошо использовать «по дефолту». Например, для того, чтобы быстро сделать работающую демоверсию, Proof on Concept, etc.</li><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Отсутствие необходимости в дополнительном хранилище для копий контента у фолловеров.</li></ul><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Теперь о минусах:&nbsp;</b><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><ul style="box-sizing: border-box; margin-bottom: 0px; margin-left: 0px; padding-left: 20px; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Чтение ленты затрагивает многие шарды, что без сомнения скажется на скорости такой выборки.</li><li style="box-sizing: border-box; margin: 0px; padding: 0px;">А это, скорее всего, потянет за собой необходимость дополнительного индексирования.</li><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Необходимость выбирать контент с «запасом».</li></ul><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h1 style="box-sizing: border-box; color: rgb(79, 97, 115); font-size: 17px; line-height: 22px; margin-top: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif; letter-spacing: normal;">Формируем ленту при записи</h1><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Давайте подойдём к проблеме немного с другой стороны. Что если для каждого пользователя хранить уже готовую новостную ленту и обновлять её каждый раз, когда его друзья будут постить что-то новое? Другими словами, мы будем делать копию каждого поста автора в «материализованную» ленту его подписчиков. Этот подход чуть менее очевиден, но ничего сверх сложного в нём тоже нет. Самое важное в нём — это найти оптимальную модель хранения этой самой «материализованной» ленты у каждого пользователя.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><img src="http://habrastorage.org/files/344/855/668/344855668c11447f9b86e6f462badfca.jpg" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">И так, что же происходит когда пользователь постит что-то новое? Как и в предыдущем случае, пост отправляется в сервис контента. Но теперь мы дополнительно делаем копию поста в ленту каждого подписчика (на самом деле, на этой картинке стрелочки, идущие в сервис ленты, должны начинаться не из поста автора, а из сервиса контента). Таким образом, у каждого пользователя формируются уже готовые для чтения персональные ленты. Очень важно так же и то, что при шардировании данных из сервиса ленты, использоваться будут ID подписчиков, а не авторов (как в случае с сервисом контента). Соответственно теперь читать ленту мы будем из одного шарда и это даст значительное ускорение.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">На первый взгляд может показаться, что создание копий поста для каждого подписчика (особенно если их десятки тысяч) может получиться весьма небыстрым делаем. Но ведь мы разрабатываем не лайв-чат, поэтому совершенно не страшно, если процесс клонирования будет занимать даже несколько минут. Ведь мы можем делать всё эту работу асинхронно, в отличии от чтения. Т.е. пользователю совершенно не обязательно ждать, пока его запись продублируется в ленту каждого его подписчика.&nbsp;</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Есть ещё один, куда более ощутимый недостаток — это необходимость где-то хранить все наши «материализованные» ленты. Т.е. это необходимость в дополнительном сторадже. И если у пользователя есть 15.000 фолловеров, то это означает, что весь его контент будет постоянно храниться в 15.000 тысячах копий. И это выглядит уже совсем не круто.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">И кратенько о преимуществах и недостатках.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Из плюсов:</b><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><ul style="box-sizing: border-box; margin-bottom: 0px; margin-left: 0px; padding-left: 20px; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Лента формируется чтением одного или нескольких документов. Количество документов будет зависеть от выбранной модели хранения ленты, об немного позже.</li><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Легко исключать неактивных юзеров из процесса предсоздания лент.</li></ul><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">О минусах:</b><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><ul style="box-sizing: border-box; margin-bottom: 0px; margin-left: 0px; padding-left: 20px; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Доставка копий большому количеству подписчиков может происходить довольно долго.</li><li style="box-sizing: border-box; margin: 0px; padding: 0px;">Необходимость в дополнительном хранилище для “материализованных” лент.</li></ul><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h1 style="box-sizing: border-box; color: rgb(79, 97, 115); font-size: 17px; line-height: 22px; margin-top: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif; letter-spacing: normal;">Модели хранения «материализованных» лент</h1><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Как вы догадываетесь, просто так мириться с проблемами мы не будем, тем более скролл ещё только на середине статьи :-) И здесь нам на помощь приходят ребята из MongoDB Labs, которые разработали целых 3 модели хранения «материализованных» лент. Каждая из этих моделей так или иначе решает описанные выше недостатки.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Забегая немного вперёд скажу, что первые две модели предполагают хранения персональной ленты за весь период её существования. Т.е. при этих двух подходах мы храним абсолютно все записи, которые когда-либо попадали в ленту. Таким образом, первые два подхода, в отличии от третьего, не решают проблему «разбухания» данных. Но, с другой стороны, они позволяют очень быстро отдавать пользователю не только топ ленты, но и все её последующие части, вплоть до самого конца. Конечно, пользователи редко скролят ленту в самый низ, но всё зависит от конкретного проекта и требований.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h4 style="box-sizing: border-box; color: rgb(0, 0, 0); font-size: 15px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif;">Группируем по времени</h4><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Эта модель подразумевает, что все посты в ленте за определённый временной интервал (час/день/etc.), группируются в одном документе. Такой документ ребята из MongoDB Labs называют «бакетом». В нашей же пост-хэллоуинской стилистике они изображены колбочками:</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><img src="http://habrastorage.org/files/e41/b8c/e32/e41b8ce325854ea4b16555427fa17e87.jpg" width="600" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><div class="spoiler" style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b class="spoiler_title" style="box-sizing: border-box; display: inline; border-bottom-width: 1px; border-bottom-style: dashed; color: rgb(62, 147, 227); cursor: pointer;">Пример с MongoDB Documents</b></div><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Всё что мы делаем, это округляем текущее время (например, берём начало каждого часа/дня), берём ID фолловера, и upsert''ом записываем каждый новый пост в свой бакет. Таким образом, все посты за определённый интервал времени будут сгруппированы для каждого подписчика в одном документе.&nbsp;</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Если за прошлый день люди, на которых вы подписаны, написали 23 поста, то во вчерашнем бакете вашего пользователя будет ровно 23 записи. Если же, например, за последние 10 дней новых постов не было, то и новые бакеты создаваться не будут. Так что в определённых случаях этот подход будет весьма удобен.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Самым главным недостатком модели является то, что создаваемые бакеты будут непредсказуемого размера. Например, в пятницу все постят пятничные коубы, и у вас в бакете будет несколько сотен записей. А на следующий день все спят, и в вашем субботнем бакете будет 1-2 записи. Это плохо тем, что вы не знаете, сколько документов вам надо прочитать для того, чтобы сформировать нужную часть ленты (даже начало). А ещё можно банально превысить максимальный размер документа в 16Мб.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h4 style="box-sizing: border-box; color: rgb(0, 0, 0); font-size: 15px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif;">Группируем по размеру</h4><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Если непредсказуемость размера бакетов критична для вашего проекта, тогда формировать бакеты нужно по количеству записей в них.&nbsp;</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><img src="http://habrastorage.org/files/948/555/e41/948555e414ba4880ba8099ccf1fdb6d4.jpg" width="600" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><div class="spoiler" style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b class="spoiler_title" style="box-sizing: border-box; display: inline; border-bottom-width: 1px; border-bottom-style: dashed; color: rgb(62, 147, 227); cursor: pointer;">Пример с MongoDB Documents</b></div><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Приведу пример. Установим лимит на бакет в 50 записей. Тогда первые 50 постов мы записываем в первый бакет пользователя. Когда настаёт черёд 51-го поста, создаём второй бакет для этого же пользователя, и пишем туда этот и следующие 50 постов. И так далее. Таким нехитрым образом мы решили проблему с нестабильным и непредсказуемым размером. Но такая модель работает на запись примерно в 2 раза медленнее, чем предыдущая. Связанно это с тем, что при записи каждого нового поста необходимо проверять достигли ли мы установленного лимита или нет. И если достигли, то создавать новый бакет и писать в уже в него.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Так что с одной стороны этот подход решает проблемы предыдущего, а с другой создаёт новые. Поэтому выбор модели будет зависеть от конкретных требований к вашей системе.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h4 style="box-sizing: border-box; color: rgb(0, 0, 0); font-size: 15px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif;">Кэшируем топ</h4><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">И, наконец, последняя модель хранения ленты, которая должна решить все-все накопившиеся проблемы. Или, по крайней мере, сбалансировать их.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><img src="http://habrastorage.org/files/c15/711/b03/c15711b03bb042fd8a321e0c103d7dfe.jpg" width="600" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><div class="spoiler" style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><b class="spoiler_title" style="box-sizing: border-box; display: inline; border-bottom-width: 1px; border-bottom-style: dashed; color: rgb(62, 147, 227); cursor: pointer;">Пример с MongoDB Documents</b></div><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Основная идея этой модели заключается в том, что мы кэшируем некоторое количество последних постов, а не храним всю историю. Т.е. по сути бакете будет представлять из себя capped-array, хранящий некоторое количество записей. В MongoDB (начиная с версии 2.4) это делается очень просто используя операторы $push и $slice.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Плюсов от такого подхода сразу несколько. Во-первых, нам надо обновлять всего один документ. При чём апдейт этот будет очень быстрый, т.к. в нём отсутствуют какие-либо проверки, в отличии от предыдущей модели. Во-вторых, для получения ленты нам надо читать опять-таки всего один документ.&nbsp;</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Далее. Если пользователь длительное время не заходит в наш сервис, то мы можем просто удалить его кэш. Таким образом, мы исключим неактивных пользователей из процесса создания «материализованных» лент, высвобождая ресурсы наших серверов. Если же неактивный пользователь вдруг решит вернуться, скажем через год, мы легко создадим для него новенький кэш. Заполнить его актуальными постами можно используя fallback в простую доставку на чтение.&nbsp;</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Таким образом, данная модель является отличным балансом между тем, чтобы хранить всё ленту для каждого пользователя и тем, чтобы строить эту ленту на каждый запрос.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h4 style="box-sizing: border-box; color: rgb(0, 0, 0); font-size: 15px; margin-top: 0px; margin-bottom: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif;">Embedding vs Linking</h4><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">И ещё один важный момент касательно хранения ленты в кэше: хранить контент постов или только ссылку?</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Подход с хранением полной копии постов прямо в бакете будет хорош, если контент постов будет небольшого и главное известного размера. В качестве идеального примера можно привести Twitter с его 140-символьными статусами.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">В общем же случае выигрывает второй подход, когда мы храним ID поста и, возможно, какие-то мета-данные (например, ID автора, дату публикации и прочее). Контент же вытягивается только при необходимости. При чём сделать это имея ID поста можно очень легко и быстро.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><h1 style="box-sizing: border-box; color: rgb(79, 97, 115); font-size: 17px; line-height: 22px; margin-top: 0px; padding: 0px; font-family: Helvetica, verdana, arial, tahoma, sans-serif; letter-spacing: normal;">Что, если я очень ленив?</h1><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">В XXI веке на каждого лентяя существует примерно 100500 приложений на каждый случай жизни. Соответственно, для каждого разработчика существует чуть меньше чем 100500 сервисов. Клёвый сервис управления лентой живёт&nbsp;</span><a href="https://getstream.io/" style="box-sizing: border-box; color: rgb(189, 111, 218); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">здесь</a><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">.</span><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">На этом у меня всё. Хочу лишь сказать о том, что серебряной пули для решения всех проблем формирования новостной ленты ожидаемо не нашлось. Но мы рассмотрели целую кучу решений и подходов, каждый из которых будет хорошо работать в своей конкретной ситуации.</span><br> ', 'URL image', '2015-08-26 14:43:48', '2015-09-08 10:25:32', 0, 0, 0, 0, 'URL', '<img src="http://habrastorage.org/files/04b/58b/804/04b58b8049ce4e1db470d07c140668a2.png" style="box-sizing: border-box; width: auto; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><br style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;"><span style="color: rgb(0, 0, 0); font-family: Helvetica, verdana, arial, tahoma, sans-serif; font-size: 15px; line-height: 23px;">Так сложилось, что за последние пару лет я успел поучаствовать в разработке нескольких социальных сетей. Главная задача, которую приходилось решать в каждом из этих проектов, заключалась в формировании новостной ленты пользователя.');
INSERT INTO java_blog.blg_post(pst_id, pst_title, pst_document, pst_title_image, pst_time_create, pst_time_modify, pst_enable, pst_count_like, pst_count_dislike, pst_count_comm, pst_url, pst_document_short) VALUES
(3, 'Second post in my blog!', 'Clean post(((((', 'URL image', '2015-08-26 14:48:34', '2015-09-08 10:23:32', 0, 0, 0, 0, 'URL', 'Clean post(((((');
INSERT INTO java_blog.blg_post(pst_id, pst_title, pst_document, pst_title_image, pst_time_create, pst_time_modify, pst_enable, pst_count_like, pst_count_dislike, pst_count_comm, pst_url, pst_document_short) VALUES
(9, 'Handlebars #each in a Play Scala View', 'If you’re using Play Scala views with Handlebars in them, and you get errors that look like these:\r\n\r\nnot found: value key\r\nIn /home/phil/myproject/app/views/myview.scala.html at line 108.\r\nor\r\n\r\nnot found: value index\r\nIn /home/phil/myproject/app/views/myview.scala.html at line 108.\r\nIt’s probably because you’re using {{@index}} when iterating through an array with {{#each myarray}} or {{@key}} when iterating through an object’s properties.\r\n\r\nThis happens because Play framework views are Scala, and the @ character is a special character. Scala thinks you’re trying to access a Scala value (and comes back with the error above). You’ll need to escape it with @@ so Scala will pass it along as just a single @ for Handlebars to see. It looks like this:\r\n\r\n{{#each objects}}\r\n  {{@key}}:{{this}}\r\n{{/each}}\r\n', 'URL image', '2015-08-27 11:43:00', '2015-09-08 10:23:00', 0, 0, 0, 0, 'URL', 'If you’re using Play Scala views with Handlebars in them, and you get errors that look like these:');
INSERT INTO java_blog.blg_post(pst_id, pst_title, pst_document, pst_title_image, pst_time_create, pst_time_modify, pst_enable, pst_count_like, pst_count_dislike, pst_count_comm, pst_url, pst_document_short) VALUES
(16, 'Spring', '<p>Spring comes with MultipartResolver to handle file upload in web application. The CommonsMultipartResolver is a common MultipartResolver implementation, which use the Apache commons upload library to handle the file upload in a form. In this tutorial, it shows how to handle the file upload in Spring MVC web application.</p>\r\n<p>1. File Upload Dependency</p>\r\n<p>To use CommonsMultipartResolver to handle the file upload, you need to get the commons-fileupload.jar andcommons-io.jar libraries.</p>\r\n<p>&lt;!-- Spring framework --&gt; <br /> &lt;dependency&gt;<br /> &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br /> &lt;artifactId&gt;spring&lt;/artifactId&gt;<br /> &lt;version&gt;2.5.6&lt;/version&gt;<br /> &lt;/dependency&gt;<br /> <br /> &lt;!-- Spring MVC framework --&gt; <br /> &lt;dependency&gt;<br /> &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br /> &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br /> &lt;version&gt;2.5.6&lt;/version&gt;<br /> &lt;/dependency&gt;<br /> <br /> &lt;!-- Apache Commons Upload --&gt; <br /> &lt;dependency&gt;<br /> &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;<br /> &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;<br /> &lt;version&gt;1.2.2&lt;/version&gt;<br /> &lt;/dependency&gt;</p>\r\n<p>&lt;!-- Apache Commons Upload --&gt; <br /> &lt;dependency&gt;<br /> &lt;groupId&gt;commons-io&lt;/groupId&gt;<br /> &lt;artifactId&gt;commons-io&lt;/artifactId&gt;<br /> &lt;version&gt;1.3.2&lt;/version&gt;<br /> &lt;/dependency&gt;<br /> <br /> &lt;!-- JSTL --&gt; <br /> &lt;dependency&gt;<br /> &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br /> &lt;artifactId&gt;jstl&lt;/artifactId&gt;<br /> &lt;version&gt;1.1.2&lt;/version&gt;<br /> &lt;/dependency&gt;<br /> <br /> &lt;dependency&gt;<br /> &lt;groupId&gt;taglibs&lt;/groupId&gt;<br /> &lt;artifactId&gt;standard&lt;/artifactId&gt;<br /> &lt;version&gt;1.1.2&lt;/version&gt;<br /> &lt;/dependency&gt;<br /> <br />2. Model</p>\r\n<p>Create a MultipartFile variable to store the uploaded file. Alternatively, you can use the byte[] to store it, but i more prefer to use the MultipartFile, because it can get the uploaded file detail (file name, file size &hellip;) easily.</p>\r\n<p>File : FileUpload.java</p>\r\n<p>package com.mkyong.common.model;<br />import org.springframework.web.multipart.MultipartFile;</p>\r\n<p>public class FileUpload{<br /> <br /> MultipartFile file;<br /> //getter and setter methods</p>\r\n<p>}<br /> <br />3. File Upload Controller</p>\r\n<p>Extends the SimpleFormController and handle the file upload form like a normal form.</p>\r\n<p>File : FileUploadController.java</p>\r\n<p>package com.mkyong.common.controller;</p>\r\n<p>import javax.servlet.http.HttpServletRequest;<br />import javax.servlet.http.HttpServletResponse;<br />import org.springframework.validation.BindException;<br />import org.springframework.web.multipart.MultipartFile;<br />import org.springframework.web.servlet.ModelAndView;<br />import org.springframework.web.servlet.mvc.SimpleFormController;</p>\r\n<p>import com.mkyong.common.model.FileUpload;</p>\r\n<p>public class FileUploadController extends SimpleFormController{<br /> <br /> public FileUploadController(){<br /> setCommandClass(FileUpload.class);<br /> setCommandName("fileUploadForm");<br /> }<br /> <br /> @Override<br /> protected ModelAndView onSubmit(HttpServletRequest request,<br /> HttpServletResponse response, Object command, BindException errors)<br /> throws Exception {<br /> <br /> FileUpload file = (FileUpload)command;<br /> <br /> MultipartFile multipartFile = file.getFile();<br /> <br /> String fileName="";</p>\r\n<p>if(multipartFile!=null){<br /> fileName = multipartFile.getOriginalFilename();<br /> //do whatever you want<br /> }<br /> <br /> return new ModelAndView("FileUploadSuccess","fileName",fileName);<br /> }<br />}<br />Note<br />If you are using the byte[] to store the uploaded file, you have to register the ByteArrayMultipartFileEditor class to guide Spring to handle the conversion between the multipart object and byte array.</p>\r\n<p>public class FileUploadController extends SimpleFormController{<br /> //...<br /> @Override<br /> protected void initBinder(HttpServletRequest request, ServletRequestDataBinder binder)<br /> throws ServletException {<br /> <br /> // Convert multipart object to byte[]<br /> binder.registerCustomEditor(byte[].class, new ByteArrayMultipartFileEditor());<br /> <br /> }</p>', NULL, '2015-09-02 13:24:42', '2015-09-08 10:22:19', 0, 0, 0, 0, 'http://localhost:8080/2015/9/2/16', '<p>Spring comes with MultipartResolver to handle file upload in web application. The CommonsMultipartResolver is a common MultipartResolver implementation, which use the Apache commons upload library to handle the file upload in a form. In this tutorial, it shows how to handle the file upload in Spring MVC web application.</p>');
INSERT INTO java_blog.blg_post(pst_id, pst_title, pst_document, pst_title_image, pst_time_create, pst_time_modify, pst_enable, pst_count_like, pst_count_dislike, pst_count_comm, pst_url, pst_document_short) VALUES
(19, 'Using a Backbone Model with Handlebars', '<p>A <a href="http://backbonejs.org/">Backbone</a> model&rsquo;s property has to be accessed with the <code>get(property)</code> method.</p>\r\n<div class="wp_syntax">\r\n<table class="table table-striped table-hover">\r\n<tbody>\r\n<tr>\r\n<td class="code">\r\n<pre class="javascript">var myObj = Backbone.Model.extend({ ... });\r\n//don''t do this\r\nconsole.log(myObj.myProp);\r\n&nbsp;\r\n//do this instead\r\nconsole.log(myObj.get(''myProp''));</pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<p>If you&rsquo;re trying to pass this object to a <a href="http://handlebarsjs.com/">Handlebars.js</a>, things start to get messy. If you&rsquo;ve got a template like this</p>\r\n<div class="wp_syntax">\r\n<table class="table table-striped table-hover">\r\n<tbody>\r\n<tr>\r\n<td class="code">\r\n<pre class="javascript">var myTemplate = Handlebars.compile("Property: {{ myObj.myProp }}");\r\nconsole.log(myTemplate(myObj));</pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<p>Handlebars won&rsquo;t find the property, and nothing will be displayed. There&rsquo;s a well-known workaround to this though, which is to convert the Backbone Model into JSON</p>\r\n<div class="wp_syntax">\r\n<table class="table table-striped table-hover">\r\n<tbody>\r\n<tr>\r\n<td class="code">\r\n<pre class="javascript">console.log(myTemplate(myObj.toJSON()));</pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<p>However this isn&rsquo;t as readable as I&rsquo;d prefer. If your collection gets really big, it can make your application slow, and in situations where you&rsquo;ve got a Backbone Collection of Models, it doesn&rsquo;t even work. <a href="http://amatiasq.com/">A. Matias Quezada</a> has <a href="https://gist.github.com/amatiasq/4710958">a better solution</a>, which is to tell Handlebars, &ldquo;hey, if it&rsquo;s a Model, use the get method&rdquo;:</p>\r\n<div class="wp_syntax">\r\n<table class="table table-striped table-hover">\r\n<tbody>\r\n<tr>\r\n<td class="code">\r\n<pre class="javascript">Handlebars.JavaScriptCompiler.prototype.nameLookup = function(parent, name, type) {\r\n\tvar result = ''('' + parent + '' instanceof Backbone.Model ? '' + parent + ''.get("'' + name + ''") : '' + parent;\r\n\tif (/^[0-9]+$/.test(name)) {\r\n\t\treturn result + "[" + name + "])";\r\n\t} else if (Handlebars.JavaScriptCompiler.isValidJavaScriptVariableName(name)) {\r\n\t\treturn result + "." + name + '')'';\r\n\t} else {\r\n\t\treturn result + "[''" + name + "''])";\r\n\t}\r\n};</pre>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n<p>That&rsquo;s it. If you run that somewhere before your Template runs, Handlebars will be able to find the Backbone Model&rsquo;s property.</p>\r\n<p><em>In writing this post, I also came across <a href="http://thoraxjs.org/">Thorax.js</a>, which probably also fixes this problem.</em></p>', NULL, '2015-09-07 21:49:06', '2015-09-07 21:49:06', 0, 0, 0, 0, 'http://localhost:8080/2015/9/7/19', '<p>A <a href="http://backbonejs.org/">Backbone</a> model&rsquo;s property has to be accessed with the <code>get(property)</code> method.</p><div class="wp_syntax"><table class="table table-striped table-hover"><tbody><tr><td class="code"><pre class="javascript">var myObj = Backbone.Model.extend({ ... });\r\n//don''t do this\r\nconsole.log(myObj.myProp);\r\n&nbsp;\r\n//do this instead\r\nconsole.log(myObj.get(''myProp''));</pre></td></tr></tbody></table></div><p>If you&rsquo;re trying to pass this object to a <a href="http://handlebarsjs.com/">Handlebars.js</a>, things start to get messy. ');

INSERT INTO java_blog.blg_post_category(pst_id, dic_cat_id) VALUES
(1, 1);
INSERT INTO java_blog.blg_post_category(pst_id, dic_cat_id) VALUES
(3, 2);
INSERT INTO java_blog.blg_post_category(pst_id, dic_cat_id) VALUES
(9, 1);
INSERT INTO java_blog.blg_post_category(pst_id, dic_cat_id) VALUES
(16, 1);
INSERT INTO java_blog.blg_post_category(pst_id, dic_cat_id) VALUES
(19, 1);


INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(9, 1);
INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(1, 2);
INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(1, 1);
INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(1, 7);
INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(16, 2);
INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(16, 5);
INSERT INTO java_blog.blg_post_tag(pst_id, dic_tag_id) VALUES
(19, 3);

INSERT INTO java_blog.blg_post_user(usr_id, pst_id) VALUES
(29, 1);
INSERT INTO java_blog.blg_post_user(usr_id, pst_id) VALUES
(35, 3);
INSERT INTO java_blog.blg_post_user(usr_id, pst_id) VALUES
(29, 9);
INSERT INTO java_blog.blg_post_user(usr_id, pst_id) VALUES
(29, 16);
INSERT INTO java_blog.blg_post_user(usr_id, pst_id) VALUES
(29, 19);

INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(1, '2015-07-03 12:54:28', 'admin', '$2a$10$GThHMT1Os9W3YbeW1buZJu9AbdPPLCOhVeSfhaXc2ob1nVc.VoDDK');
INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(27, '2015-07-29 18:31:49', 'sonik9@mail.ru', '$2a$10$WaFbJgcHLghxg/1gkWUCBeo/8FTzoniQmMNTY1XSGgQdrGdVp4bme');
INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(28, '2015-07-29 18:32:16', 'den@mail.ru', '$2a$10$PmuuZP1jImAKyfyHaUBoXeKBpv61NzKFmhdplvgQ0sKzu7ZAJ8mYe');
INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(29, '2015-08-24 15:21:17', 'user@mail.ru', '$2a$10$H5vnQK9.n/6DetoTYi3kFuP0QXd9TT9b79/7NGMLEQOPDEsijjzrK');
INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(32, '2015-07-30 17:28:34', 'test@test', '$2a$10$rZScVV9mCP/0DGYDXdIqXekUL47ZtnlKQNtQJdMqoHKFABH9i539W');
INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(35, '2015-08-12 22:14:22', 'upirvo@gmail.com', '$2a$10$YxQ6Y4GNxfa.OE40ti6wTOdVKiKnGlQsLnr8x6wXDV6alZ/Y9eBLW');
INSERT INTO java_blog.blg_user(usr_id, usr_dateTimeChange, usr_login, usr_password) VALUES
(37, '2015-08-25 18:47:16', 'maxut@mail.ru', '$2a$10$7dZAIqdva2LsLZg3ac.pLOfysagchjfj5EOOmazw0dntoIYCV3bki');

INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(2, NULL, NULL, NULL, NULL, 'Admin', 'Admin', 1, NULL, NULL);
INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(24, NULL, NULL, NULL, NULL, 'Vitalii', 'Upir', 27, NULL, NULL);
INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(25, NULL, NULL, NULL, NULL, 'Rudnev', 'Denis', 28, NULL, NULL);
INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(26, NULL, NULL, NULL, NULL, 'user', 'user', 29, 'http://localhost:8080/resources/images/95-1024.jpg', '1');
INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(31, NULL, NULL, NULL, NULL, 'test', 'test', 32, NULL, '1');
INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(34, NULL, NULL, NULL, NULL, 'Vitalii', 'Upir', 35, 'https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xfa1/v/t1.0-1/p200x200/11813253_1871359643089626_4261137701832571727_n.jpg?oh=104fc34bc3e730b3de6686a08a7a7b81&oe=5670AA88&__gda__=1450249668_23998fcb7a1881e0e6dc6ec652544675', '0');
INSERT INTO java_blog.blg_user_detail(usr_det_id, usr_det_adres, usr_det_birthdate, usr_det_city, usr_det_country, usr_det_firstname, usr_det_lastname, usr_id, usr_photo_link, usr_gender) VALUES
(38, NULL, NULL, NULL, NULL, 'Andrey', 'Maxutenko', 37, NULL, NULL);

INSERT INTO java_blog.blg_user_facebook(usr_fb_id, usr_id, usr_fb_verified, usr_fb_accesstoken) VALUES
(1855296584695932, 35, 1, 'CAALCuxOHfUEBAEPxphVAvEpBIy9IIZAvRSLukVyLWzs0ZAhq4WAcshxr9tI4xuZA1rLTLUf8KCflXerU0VPlpzjTKqf1EFIqfxKSLRsNZCzGe9x0ZA3IfwrcIR5ZCiY7a10nTIjthPcj9vJhcumuTTdsrByiUJB5MeUZCbuCCLJ9uxZBZAO97QenpMbZC0lCWlJmUZD');


INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(1, 1);
INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(27, 2);
INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(28, 2);
INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(29, 2);
INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(32, 2);
INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(35, 1);
INSERT INTO java_blog.blg_user_role(usr_id, role_id) VALUES
(37, 2);

INSERT INTO java_blog.blg_user_telephone(usr_tel_id, usr_tel_numb, usr_id, tel_type_id) VALUES
(1, '+380636171846', 1, 1);
INSERT INTO java_blog.blg_user_telephone(usr_tel_id, usr_tel_numb, usr_id, tel_type_id) VALUES
(2, '+48790390855', 1, 2);
INSERT INTO java_blog.blg_user_telephone(usr_tel_id, usr_tel_numb, usr_id, tel_type_id) VALUES
(3, '+4800000000', 2, 2);
INSERT INTO java_blog.blg_user_telephone(usr_tel_id, usr_tel_numb, usr_id, tel_type_id) VALUES
(4, '+38111111111', 2, 1);
INSERT INTO java_blog.blg_user_telephone(usr_tel_id, usr_tel_numb, usr_id, tel_type_id) VALUES
(5, '123-333-111', 23, 1);